name: Test Home Manager Configurations

on:
  push:
    branches:
      - main
    paths:
      - '.config/home-manager/**'
  pull_request:
    branches:
      - main
    paths:
      - '.config/home-manager/**'
  workflow_dispatch:

jobs:
  test-configs:
    name: Test ${{ matrix.host }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Test default.nix on both platforms (auto-detects)
          - host: default
            os: ubuntu-latest
            platform: linux
          - host: default
            os: macos-latest
            platform: darwin

          # Test specific host configs on their target platforms
          - host: work-macbook-pro
            os: macos-latest
            platform: darwin
          - host: macbook-air
            os: macos-latest
            platform: darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Setup Cachix (optional - speeds up builds)
        uses: cachix/cachix-action@v12
        if: ${{ vars.CACHIX_NAME != '' }}
        with:
          name: ${{ vars.CACHIX_NAME }}
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Install Home Manager
        run: |
          nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
          nix-channel --update
          nix-shell '<home-manager>' -A install

      - name: Set test environment variables
        run: |
          # Set dummy values for auto-detection in default.nix
          echo "USER=testuser" >> $GITHUB_ENV
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            echo "HOME=/Users/testuser" >> $GITHUB_ENV
          else
            echo "HOME=/home/testuser" >> $GITHUB_ENV
          fi
          echo "HOSTNAME=github-runner" >> $GITHUB_ENV

      - name: Test configuration build
        run: |
          cd ${{ github.workspace }}
          echo "Testing configuration: ${{ matrix.host }}.nix"

          # Build the configuration without creating result symlink
          home-manager build \
            --file .config/home-manager/hosts/${{ matrix.host }}.nix \
            --no-out-link \
            --show-trace

      - name: Test configuration evaluation
        run: |
          cd ${{ github.workspace }}
          echo "Evaluating configuration for detailed analysis..."

          # Test that the configuration evaluates without errors
          nix-instantiate \
            --eval \
            --strict \
            --show-trace \
            --expr "
              let
                pkgs = import <nixpkgs> {};
                home-manager = import <home-manager> {};
                config = import ./.config/home-manager/hosts/${{ matrix.host }}.nix {
                  inherit pkgs;
                  config = {};
                  lib = pkgs.lib;
                };
              in
                config.home.stateVersion or \"unknown\"
            "

      - name: Check for common issues
        run: |
          cd ${{ github.workspace }}
          echo "Checking for common configuration issues..."

          # Check if all imported files exist
          echo "Checking imports..."
          if ! find .config/home-manager -name "*.nix" -exec nix-instantiate --parse {} \; > /dev/null; then
            echo "❌ Syntax errors found in nix files"
            exit 1
          fi

          # Check for missing files referenced in configs
          echo "Checking file references..."
          if grep -r "source.*\.\." .config/home-manager/hosts/${{ matrix.host }}.nix; then
            echo "Found relative path references - ensuring they exist..."
            # This is just informational, actual test is in the build step
          fi

          echo "✅ Basic checks passed"

      - name: Generate build artifacts info
        if: always()
        run: |
          cd ${{ github.workspace }}
          echo "## Configuration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Host**: ${{ matrix.host }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Configuration builds successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Configuration failed to build" >> $GITHUB_STEP_SUMMARY
          fi

  test-matrix-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: test-configs
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Home Manager Configuration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test-configs.result }}" == "success" ]]; then
            echo "🎉 **All configurations passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All host configurations build successfully and are ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some configurations failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the individual job results above for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tested Configurations:" >> $GITHUB_STEP_SUMMARY
          echo "- default.nix (Linux & macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- work-macbook-pro.nix (macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- macbook-air.nix (macOS)" >> $GITHUB_STEP_SUMMARY
