name: Test Home Manager Configurations

on:
  push:
    branches:
      - main
    paths:
      - '.config/home-manager/**'
      - 'flake.nix'
      - 'flake.lock'
  pull_request:
    branches:
      - main
    paths:
      - '.config/home-manager/**'
      - 'flake.nix'
      - 'flake.lock'
  workflow_dispatch:

jobs:
  test-configs:
    name: Test ${{ matrix.config }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Test configurations from flake
          - config: default
            os: ubuntu-latest
            platform: linux
            system: x86_64-linux
          - config: linux-user
            os: ubuntu-latest
            platform: linux
            system: x86_64-linux
          - config: work-macbook-pro
            os: macos-latest
            platform: darwin
            system: aarch64-darwin
          - config: macbook-air
            os: macos-latest
            platform: darwin
            system: aarch64-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      # - name: Setup Cachix (optional - speeds up builds)
      #   uses: cachix/cachix-action@v12
      #   if: ${{ vars.CACHIX_NAME != '' }}
      #   with:
      #     name: ${{ vars.CACHIX_NAME }}
      #     authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Set test environment variables
        run: |
          # Set test username for configurations that need it
          echo "USER=testuser" >> $GITHUB_ENV
          # Keep the existing HOME directory (GitHub runner's home)
          echo "REAL_HOME=$HOME" >> $GITHUB_ENV
          # Set hostname for testing
          echo "HOSTNAME=github-runner" >> $GITHUB_ENV

      - name: Test flake evaluation
        run: |
          cd ${{ github.workspace }}
          echo "Testing flake configuration: ${{ matrix.config }}"

          # Check that the flake is valid
          nix flake check --show-trace

          # Show available configurations
          echo "Available configurations:"
          nix flake show

      - name: Test configuration build
        run: |
          cd ${{ github.workspace }}
          echo "Building Home Manager configuration: ${{ matrix.config }}"

          # Build the specific configuration from the flake
          nix build .#homeConfigurations.${{ matrix.config }}.activationPackage \
            --no-link \
            --show-trace \
            --print-build-logs

      - name: Test configuration evaluation
        run: |
          cd ${{ github.workspace }}
          echo "Evaluating configuration for detailed analysis..."

          # Test that the configuration evaluates without errors
          nix eval .#homeConfigurations.${{ matrix.config }}.config.home.stateVersion \
            --show-trace

          # Test that packages are available
          echo "Testing package availability..."
          nix eval .#homeConfigurations.${{ matrix.config }}.config.home.packages \
            --apply "builtins.length" \
            --show-trace

      - name: Check for common issues
        run: |
          cd ${{ github.workspace }}
          echo "Checking for common configuration issues..."

          # Check if all imported files exist
          echo "Checking Nix syntax..."
          if ! find .config/home-manager -name "*.nix" -exec nix-instantiate --parse {} \; > /dev/null; then
            echo "❌ Syntax errors found in nix files"
            exit 1
          fi

          # Check flake syntax
          echo "Checking flake syntax..."
          nix flake check

          echo "✅ Basic checks passed"

      - name: Generate build artifacts info
        if: always()
        run: |
          cd ${{ github.workspace }}
          echo "## Configuration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ matrix.config }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **System**: ${{ matrix.system }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Configuration builds successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Configuration failed to build" >> $GITHUB_STEP_SUMMARY
          fi

  test-matrix-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: test-configs
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Home Manager Configuration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test-configs.result }}" == "success" ]]; then
            echo "🎉 **All configurations passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All host configurations build successfully and are ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some configurations failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the individual job results above for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tested Configurations:" >> $GITHUB_STEP_SUMMARY
          echo "- default (Linux)" >> $GITHUB_STEP_SUMMARY
          echo "- linux-user (Linux)" >> $GITHUB_STEP_SUMMARY
          echo "- work-macbook-pro (macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- macbook-air (macOS)" >> $GITHUB_STEP_SUMMARY
